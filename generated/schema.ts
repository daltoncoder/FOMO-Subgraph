// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("traits", Value.fromString(""));
    this.set("image", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get traits(): string {
    let value = this.get("traits");
    return value!.toString();
  }

  set traits(value: string) {
    this.set("traits", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }
}

export class Traits extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Traits entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Traits entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Traits", id.toString(), this);
    }
  }

  static load(id: string): Traits | null {
    return changetype<Traits | null>(store.get("Traits", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Background(): string | null {
    let value = this.get("Background");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Background(value: string | null) {
    if (!value) {
      this.unset("Background");
    } else {
      this.set("Background", Value.fromString(<string>value));
    }
  }

  get Body(): string | null {
    let value = this.get("Body");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Body(value: string | null) {
    if (!value) {
      this.unset("Body");
    } else {
      this.set("Body", Value.fromString(<string>value));
    }
  }

  get Skin(): string | null {
    let value = this.get("Skin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Skin(value: string | null) {
    if (!value) {
      this.unset("Skin");
    } else {
      this.set("Skin", Value.fromString(<string>value));
    }
  }

  get Faces(): string | null {
    let value = this.get("Faces");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Faces(value: string | null) {
    if (!value) {
      this.unset("Faces");
    } else {
      this.set("Faces", Value.fromString(<string>value));
    }
  }

  get Headwear(): string | null {
    let value = this.get("Headwear");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Headwear(value: string | null) {
    if (!value) {
      this.unset("Headwear");
    } else {
      this.set("Headwear", Value.fromString(<string>value));
    }
  }

  get Piercing(): string | null {
    let value = this.get("Piercing");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Piercing(value: string | null) {
    if (!value) {
      this.unset("Piercing");
    } else {
      this.set("Piercing", Value.fromString(<string>value));
    }
  }

  get Fomies(): string | null {
    let value = this.get("Fomies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Fomies(value: string | null) {
    if (!value) {
      this.unset("Fomies");
    } else {
      this.set("Fomies", Value.fromString(<string>value));
    }
  }

  get Sparkles(): string | null {
    let value = this.get("Sparkles");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Sparkles(value: string | null) {
    if (!value) {
      this.unset("Sparkles");
    } else {
      this.set("Sparkles", Value.fromString(<string>value));
    }
  }
}

export class Holder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Holder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Holder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Holder", id.toString(), this);
    }
  }

  static load(id: string): Holder | null {
    return changetype<Holder | null>(store.get("Holder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }
}
